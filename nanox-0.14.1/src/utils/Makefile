# Makefile.in generated by automake 1.15 from Makefile.am.
# src/utils/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



#####################################################################################
#      Copyright 2015 Barcelona Supercomputing Center                               #
#                                                                                   #
#      This file is part of the NANOS++ library.                                    #
#                                                                                   #
#      NANOS++ is free software: you can redistribute it and/or modify              #
#      it under the terms of the GNU Lesser General Public License as published by  #
#      the Free Software Foundation, either version 3 of the License, or            #
#      (at your option) any later version.                                          #
#                                                                                   #
#      NANOS++ is distributed in the hope that it will be useful,                   #
#      but WITHOUT ANY WARRANTY; without even the implied warranty of               #
#      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
#      GNU Lesser General Public License for more details.                          #
#                                                                                   #
#      You should have received a copy of the GNU Lesser General Public License     #
#      along with NANOS++.  If not, see <http://www.gnu.org/licenses/>.             #
#####################################################################################


am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/nanox
pkgincludedir = $(includedir)/nanox
pkglibdir = $(libdir)/nanox
pkglibexecdir = $(libexecdir)/nanox
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
target_triplet = x86_64-unknown-linux-gnu
bin_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \
	$(am__EXEEXT_4)
am__append_1 = nanox-dbg
am__append_2 = nanox-ins
#am__append_3 = nanox-ins-dbg

# For simplicity, we will only build nanox-bindings in PERFORMANCE version
am__append_4 = nanox-pfm nanox-bindings
subdir = src/utils
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/atomic_builtins.m4 \
	$(top_srcdir)/m4/ax_append_flag.m4 \
	$(top_srcdir)/m4/ax_build_versions.m4 \
	$(top_srcdir)/m4/ax_check_bgq.m4 \
	$(top_srcdir)/m4/ax_check_compile_flag.m4 \
	$(top_srcdir)/m4/ax_check_cuda.m4 \
	$(top_srcdir)/m4/ax_check_dlb.m4 \
	$(top_srcdir)/m4/ax_check_extrae.m4 \
	$(top_srcdir)/m4/ax_check_gasnet.m4 \
	$(top_srcdir)/m4/ax_check_host.m4 \
	$(top_srcdir)/m4/ax_check_hwloc.m4 \
	$(top_srcdir)/m4/ax_check_link_flag.m4 \
	$(top_srcdir)/m4/ax_check_memkind.m4 \
	$(top_srcdir)/m4/ax_check_mic.m4 \
	$(top_srcdir)/m4/ax_check_mpi.m4 \
	$(top_srcdir)/m4/ax_check_opencl.m4 \
	$(top_srcdir)/m4/ax_check_sqlite3.m4 \
	$(top_srcdir)/m4/ax_check_xdma.m4 \
	$(top_srcdir)/m4/ax_compare_version.m4 \
	$(top_srcdir)/m4/ax_compiler_vendor.m4 \
	$(top_srcdir)/m4/ax_config_cc.m4 \
	$(top_srcdir)/m4/ax_enable_task_callback.m4 \
	$(top_srcdir)/m4/ax_pthread.m4 \
	$(top_srcdir)/m4/ax_var_pushpop.m4 $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__EXEEXT_1 = nanox-dbg$(EXEEXT)
am__EXEEXT_2 = nanox-ins$(EXEEXT)
#am__EXEEXT_3 =  \
#	nanox-ins-dbg$(EXEEXT)
am__EXEEXT_4 = nanox-pfm$(EXEEXT) \
	nanox-bindings$(EXEEXT)
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am__nanox_bindings_SOURCES_DIST = nanox_bindings.cpp
am_nanox_bindings_OBJECTS = nanox_bindings-nanox_bindings.$(OBJEXT)
nanox_bindings_OBJECTS = $(am_nanox_bindings_OBJECTS)
am__DEPENDENCIES_1 =
nanox_bindings_DEPENDENCIES = $(top_builddir)/src/core/performance/libnanox.la \
	$(top_builddir)/src/pms/performance/libnanox-ompss.la \
	$(top_builddir)/src/apis/performance/libnanox-c.la \
	$(am__DEPENDENCIES_1)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
nanox_bindings_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(AM_CXXFLAGS) $(CXXFLAGS) $(nanox_bindings_LDFLAGS) \
	$(LDFLAGS) -o $@
am__nanox_dbg_SOURCES_DIST = nanox.cpp
am__objects_1 =
am__objects_2 = nanox_dbg-nanox.$(OBJEXT) $(am__objects_1)
am_nanox_dbg_OBJECTS = $(am__objects_2)
nanox_dbg_OBJECTS = $(am_nanox_dbg_OBJECTS)
nanox_dbg_DEPENDENCIES = $(top_builddir)/src/core/debug/libnanox.la \
	$(am__DEPENDENCIES_1)
nanox_dbg_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(nanox_dbg_LDFLAGS) $(LDFLAGS) -o $@
am__nanox_ins_SOURCES_DIST = nanox.cpp
am__objects_3 = nanox_ins-nanox.$(OBJEXT) $(am__objects_1)
am_nanox_ins_OBJECTS =  \
	$(am__objects_3)
nanox_ins_OBJECTS = $(am_nanox_ins_OBJECTS)
nanox_ins_DEPENDENCIES = $(top_builddir)/src/core/instrumentation/libnanox.la \
	$(am__DEPENDENCIES_1)
nanox_ins_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(nanox_ins_LDFLAGS) $(LDFLAGS) -o $@
am__nanox_ins_dbg_SOURCES_DIST = nanox.cpp
am__objects_4 = nanox_ins_dbg-nanox.$(OBJEXT) $(am__objects_1)
#am_nanox_ins_dbg_OBJECTS =  \
#	$(am__objects_4)
nanox_ins_dbg_OBJECTS = $(am_nanox_ins_dbg_OBJECTS)
#nanox_ins_dbg_DEPENDENCIES = $(top_builddir)/src/core/instrumentation-debug/libnanox.la \
#	$(am__DEPENDENCIES_1)
nanox_ins_dbg_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(AM_CXXFLAGS) $(CXXFLAGS) $(nanox_ins_dbg_LDFLAGS) $(LDFLAGS) \
	-o $@
am__nanox_pfm_SOURCES_DIST = nanox.cpp
am__objects_5 = nanox_pfm-nanox.$(OBJEXT) $(am__objects_1)
am_nanox_pfm_OBJECTS = $(am__objects_5)
nanox_pfm_OBJECTS = $(am_nanox_pfm_OBJECTS)
nanox_pfm_DEPENDENCIES = $(top_builddir)/src/core/performance/libnanox.la \
	$(am__DEPENDENCIES_1)
nanox_pfm_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(nanox_pfm_LDFLAGS) $(LDFLAGS) -o $@
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(nanox_bindings_SOURCES) $(nanox_dbg_SOURCES) \
	$(nanox_ins_SOURCES) $(nanox_ins_dbg_SOURCES) \
	$(nanox_pfm_SOURCES)
DIST_SOURCES = $(am__nanox_bindings_SOURCES_DIST) \
	$(am__nanox_dbg_SOURCES_DIST) $(am__nanox_ins_SOURCES_DIST) \
	$(am__nanox_ins_dbg_SOURCES_DIST) \
	$(am__nanox_pfm_SOURCES_DIST)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp \
	$(top_srcdir)/src/common.am
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/ryan/ompss-17.12.1/nanox-0.14.1/missing aclocal-1.15
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 0
AR = ar
ARCHITECTURES =  smp gpu
AUTOCONF = ${SHELL} /home/ryan/ompss-17.12.1/nanox-0.14.1/missing autoconf
AUTOHEADER = ${SHELL} /home/ryan/ompss-17.12.1/nanox-0.14.1/missing autoheader
AUTOMAKE = ${SHELL} /home/ryan/ompss-17.12.1/nanox-0.14.1/missing automake-1.15
AWK = gawk
AYUDAME_BIN = 
AYUDAME_HOME = 
AYUDAME_INC = 
AYUDAME_LIB = 
CC = gcc
CCAS = gcc
CCASDEPMODE = depmode=gcc3
CCASFLAGS = 
CCDEPMODE = depmode=gcc3
CELLSDK_INC = 
CELLSDK_LIB = 
CFLAGS = 
CHAPEL_HOME = 
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = 
CYGPATH_W = echo
DEB_RELEASE = Core
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
FGREP = /usr/bin/grep -F
GIT = 
GREP = /usr/bin/grep
HAVE_CUDA = GPU_DEV
HAVE_DLB = NO_DLB
HAVE_GASNET = NO_CLUSTER_DEV
HAVE_HWLOC = NO_HWLOC
HAVE_NEW_GCC_ATOMIC_OPS = NO_HAVE_NEW_GCC_ATOMIC_OPS
HAVE_OPENCL = NO_OpenCL_DEV
HAVE_XDMA = NO_FPGA_DEV
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBOBJS = 
LIBS =   -lcusparse -lcublas -lcudart  
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
LT_SYS_LIBRARY_PATH = 
MAKEINFO = ${SHELL} /home/ryan/ompss-17.12.1/nanox-0.14.1/missing makeinfo
MANIFEST_TOOL = :
MCC = 
MCXX = 
MKDIR_P = /usr/bin/mkdir -p
MKL_LIBS = 
MPICXX = 
MPITRACE_BIN = 
MPITRACE_HOME = 
MPITRACE_INC = 
MPITRACE_LIB = 
NANOS_MEMTRACKER_ENABLED = NO_NANOS_MEMTRACKER_ENABLED
NANOS_RESILIENCY_ENABLED = NO_NANOS_RESILIENCY_ENABLED
NANOX_BUILD_VERSION = "git HEAD 972fdad 2018-04-06 09:43:24 +0200 developer version"
NEXTSIM_HOME = 
NEXTSIM_INC = 
NM = /usr/bin/nm -B
NMEDIT = 
NVCC = /usr/local/cuda/bin/nvcc
OBJDUMP = objdump
OBJEXT = o
OPTIONS = 
OS = unix-os
OTOOL = 
OTOOL64 = 
PACKAGE = nanox
PACKAGE_BUGREPORT = pm-tools@bsc.es
PACKAGE_NAME = nanox
PACKAGE_STRING = nanox 0.14.1
PACKAGE_TARNAME = nanox
PACKAGE_URL = 
PACKAGE_VERSION = 0.14.1
PATH_SEPARATOR = :
PLUGINS = plugins pms arch/unix-os arch/smp arch/gpu
PPUEMBED = 
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -pthread
PTHREAD_LIBS = 
RANLIB = ranlib
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/sh
SMP_ARCH = x86-64
SMP_SUPPORTS_ULT = SMP_SUPPORTS_ULT
SPUCC = 
STRIP = strip
VERSION = 0.14.1
VERSIONS = performance debug instrumentation 
abs_builddir = /home/ryan/ompss-17.12.1/nanox-0.14.1/src/utils
abs_srcdir = /home/ryan/ompss-17.12.1/nanox-0.14.1/src/utils
abs_top_builddir = /home/ryan/ompss-17.12.1/nanox-0.14.1
abs_top_srcdir = /home/ryan/ompss-17.12.1/nanox-0.14.1
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
ax_pthread_config = 
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
cc_dep_CPPFLAGS = -include "config.h" -include "nanox-config.h"
cc_dep_CXXFLAGS = -include "new_decl.hpp" -Wall -Wextra -Wshadow -Wmissing-declarations -Wno-unused-parameter -Wno-missing-field-initializers -Werror
cuda = yes
cuda_prefix = /usr/local/cuda
cudainc = -isystem /usr/local/cuda/include
cudalib = -L/usr/local/cuda/lib64 -Wl,-rpath,/usr/local/cuda/lib64
cudalibs = -lcusparse -lcublas -lcudart 
datadir = ${datarootdir}
datarootdir = ${prefix}/share
debug_CPPFLAGS = -DNANOS_DEBUG_ENABLED
debug_CXXFLAGS = -O0 -g2 -fno-inline
debugdir = ${libdir}/debug
dlbcppflags = 
dlbldflags = 
dlblibs = 
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
enable_resiliency = no
exec_prefix = ${prefix}
gasnet_aries_inc = 
gasnet_aries_libs = 
gasnet_ibv_inc = 
gasnet_ibv_libs = 
gasnet_mpi_inc = 
gasnet_mpi_libs = 
gasnet_mxm_inc = 
gasnet_mxm_libs = 
gasnet_smp_inc = 
gasnet_smp_libs = 
gasnet_udp_inc = 
gasnet_udp_libs = 
gasnetlib = 
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
hwloc = 
hwlocinc = 
hwloclib = 
hwloclibs = 
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/ryan/ompss-17.12.1/nanox-0.14.1/install-sh
instrumentation_CPPFLAGS = -DNANOS_INSTRUMENTATION_ENABLED
instrumentation_CXXFLAGS = -O3
instrumentation_debug_CPPFLAGS = -DNANOS_DEBUG_ENABLED -DNANOS_INSTRUMENTATION_ENABLED
instrumentation_debug_CXXFLAGS = -O0 -g2 -fno-inline
instrumentation_debugdir = ${libdir}/instrumentation-debug
instrumentationdir = ${libdir}/instrumentation
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mcc_valid = no
memkindinc = 
memkindlib = 
memkindlibs = 
mkdir_p = $(MKDIR_P)
mpiinc = 
mpilib = 
mpilibs = 
nanos_config_libs_debug =  $(abs_top_builddir)/src/arch/smp/debug/libsmp.la $(abs_top_builddir)/src/arch/gpu/debug/libgpu.la $(abs_top_builddir)/src/arch/unix-os/debug/libos.la $(abs_top_builddir)/src/support/debug/libsupport.la
nanos_config_libs_instrumentation =  $(abs_top_builddir)/src/arch/smp/instrumentation/libsmp.la $(abs_top_builddir)/src/arch/gpu/instrumentation/libgpu.la $(abs_top_builddir)/src/arch/unix-os/instrumentation/libos.la $(abs_top_builddir)/src/support/instrumentation/libsupport.la
nanos_config_libs_instrumentation_debug =  $(abs_top_builddir)/src/arch/smp/instrumentation-debug/libsmp.la $(abs_top_builddir)/src/arch/gpu/instrumentation-debug/libgpu.la $(abs_top_builddir)/src/arch/unix-os/instrumentation-debug/libos.la $(abs_top_builddir)/src/support/instrumentation-debug/libsupport.la
nanos_config_libs_performance =  $(abs_top_builddir)/src/arch/smp/performance/libsmp.la $(abs_top_builddir)/src/arch/gpu/performance/libgpu.la $(abs_top_builddir)/src/arch/unix-os/performance/libos.la $(abs_top_builddir)/src/support/performance/libsupport.la
no_inline_flag = -fno-inline
oldincludedir = /usr/include
opencl = no
openclinc = 
opencllib = 
opencllibs = 
pdfdir = ${docdir}
performance_CPPFLAGS = 
performance_CXXFLAGS = -O3
performancedir = ${libdir}/performance
prefix = /home/ryan/mercurium
program_transform_name = s,x,x,
psdir = ${docdir}
resiliency_flags = 
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sqlite3inc = 
sqlite3lib = 
sqlite3libs = -lsqlite3 
srcdir = .
sysconfdir = ${prefix}/etc
target = x86_64-unknown-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = unknown
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
xdmainc = 
xdmalib = 
xdmalibs = 
END = 

# Generate include list
# Build directory is included to
# avoid problems with config.h inclusion
common_includes = \
 -I$(top_builddir)\
 -I$(top_srcdir)/src/arch/unix-os\
 -I$(top_srcdir)/src/arch/cluster\
 -I$(top_srcdir)/src/arch/common\
 -I$(top_srcdir)/src/arch/gpu\
 -I$(top_srcdir)/src/arch/fpga\
 -I$(top_srcdir)/src/arch/opencl\
 -I$(top_srcdir)/src/arch/smp\
 -I$(top_srcdir)/src/arch/spu\
 -I$(top_srcdir)/src/core\
 -I$(top_srcdir)/src/support\
 $(END)

api_includes = \
 -I$(top_srcdir)/src/apis/c\
 -I$(top_builddir)/src/apis/c

devincludedir = $(prefix)/include/nanox-dev
AM_CPPFLAGS = -D_NANOS_INTERNAL -include "config.h" -include "nanox-config.h"  $(common_includes) -DLIBDIR='$(libdir)'
AM_CXXFLAGS = -pthread -include "new_decl.hpp" -Wall -Wextra -Wshadow -Wmissing-declarations -Wno-unused-parameter -Wno-missing-field-initializers -Werror
AM_LDFLAGS =  -L/usr/local/cuda/lib64 -Wl,-rpath,/usr/local/cuda/lib64 
common_performance_CPPFLAGS = $(AM_CPPFLAGS) 
common_debug_CPPFLAGS = $(AM_CPPFLAGS) -DNANOS_DEBUG_ENABLED
common_instrumentation_CPPFLAGS = $(AM_CPPFLAGS) -DNANOS_INSTRUMENTATION_ENABLED
common_instrumentation_debug_CPPFLAGS = $(AM_CPPFLAGS) -DNANOS_DEBUG_ENABLED -DNANOS_INSTRUMENTATION_ENABLED
common_performance_CXXFLAGS = $(AM_CXXFLAGS) -O3
common_debug_CXXFLAGS = $(AM_CXXFLAGS) -O0 -g2 -fno-inline
common_instrumentation_CXXFLAGS = $(AM_CXXFLAGS) -O3
common_instrumentation_debug_CXXFLAGS = $(AM_CXXFLAGS) -O0 -g2 -fno-inline
common_performance_CCASFLAGS = -O3
common_debug_CCASFLAGS = -O0 -g2 -fno-inline
common_instrumentation_CCASFLAGS = -O3
common_instrumentation_debug_CCASFLAGS = -O0 -g2 -fno-inline
version_flags = -version-info 1:0:0
ld_plugin_flags = -module -avoid-version
nanox_sources = \
   nanox.cpp \
   $(END)

nanox_dbg_CPPFLAGS = $(common_debug_CPPFLAGS) -DPLUGIN_DIR=\"$(debugdir)\"
nanox_dbg_SOURCES = $(nanox_sources)
nanox_dbg_LDFLAGS = $(AM_LDFLAGS)
nanox_dbg_LDADD = \
-ldl \
$(top_builddir)/src/core/debug/libnanox.la \
$(END)

nanox_ins_CPPFLAGS = $(common_instrumentation_CPPFLAGS) -DPLUGIN_DIR=\"$(instrumentationdir)\"
nanox_ins_SOURCES = $(nanox_sources)
nanox_ins_LDFLAGS = $(AM_LDFLAGS)
nanox_ins_LDADD = \
-ldl \
$(top_builddir)/src/core/instrumentation/libnanox.la \
$(END)

#nanox_ins_dbg_CPPFLAGS = $(common_instrumentation_debug_CPPFLAGS) -DPLUGIN_DIR=\"$(instrumentation_debugdir)\"
#nanox_ins_dbg_SOURCES = $(nanox_sources)
#nanox_ins_dbg_LDFLAGS = $(AM_LDFLAGS)
#nanox_ins_dbg_LDADD = \
#	-ldl \
#	$(top_builddir)/src/core/instrumentation-debug/libnanox.la \
#	$(END)

nanox_pfm_CPPFLAGS = $(common_performance_CPPFLAGS) -DPLUGIN_DIR=\"$(performancedir)\"
nanox_pfm_SOURCES = $(nanox_sources)
nanox_pfm_LDFLAGS = $(AM_LDFLAGS)
nanox_pfm_LDADD = \
	-ldl \
	$(top_builddir)/src/core/performance/libnanox.la \
	$(END)

nanox_bindings_CPPFLAGS = $(common_performance_CPPFLAGS) $(common_includes) $(bin_cxxflags) -DPLUGIN_DIR=\"$(performancedir)\"
nanox_bindings_SOURCES = nanox_bindings.cpp
nanox_bindings_LDFLAGS = $(AM_LDFLAGS)
nanox_bindings_LDADD = \
	$(top_builddir)/src/core/performance/libnanox.la \
	$(top_builddir)/src/pms/performance/libnanox-ompss.la \
	$(top_builddir)/src/apis/performance/libnanox-c.la \
	$(END)

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/src/common.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/utils/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/utils/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/src/common.am $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

nanox-bindings$(EXEEXT): $(nanox_bindings_OBJECTS) $(nanox_bindings_DEPENDENCIES) $(EXTRA_nanox_bindings_DEPENDENCIES) 
	@rm -f nanox-bindings$(EXEEXT)
	$(AM_V_CXXLD)$(nanox_bindings_LINK) $(nanox_bindings_OBJECTS) $(nanox_bindings_LDADD) $(LIBS)

nanox-dbg$(EXEEXT): $(nanox_dbg_OBJECTS) $(nanox_dbg_DEPENDENCIES) $(EXTRA_nanox_dbg_DEPENDENCIES) 
	@rm -f nanox-dbg$(EXEEXT)
	$(AM_V_CXXLD)$(nanox_dbg_LINK) $(nanox_dbg_OBJECTS) $(nanox_dbg_LDADD) $(LIBS)

nanox-ins$(EXEEXT): $(nanox_ins_OBJECTS) $(nanox_ins_DEPENDENCIES) $(EXTRA_nanox_ins_DEPENDENCIES) 
	@rm -f nanox-ins$(EXEEXT)
	$(AM_V_CXXLD)$(nanox_ins_LINK) $(nanox_ins_OBJECTS) $(nanox_ins_LDADD) $(LIBS)

nanox-ins-dbg$(EXEEXT): $(nanox_ins_dbg_OBJECTS) $(nanox_ins_dbg_DEPENDENCIES) $(EXTRA_nanox_ins_dbg_DEPENDENCIES) 
	@rm -f nanox-ins-dbg$(EXEEXT)
	$(AM_V_CXXLD)$(nanox_ins_dbg_LINK) $(nanox_ins_dbg_OBJECTS) $(nanox_ins_dbg_LDADD) $(LIBS)

nanox-pfm$(EXEEXT): $(nanox_pfm_OBJECTS) $(nanox_pfm_DEPENDENCIES) $(EXTRA_nanox_pfm_DEPENDENCIES) 
	@rm -f nanox-pfm$(EXEEXT)
	$(AM_V_CXXLD)$(nanox_pfm_LINK) $(nanox_pfm_OBJECTS) $(nanox_pfm_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/nanox_bindings-nanox_bindings.Po
include ./$(DEPDIR)/nanox_dbg-nanox.Po
include ./$(DEPDIR)/nanox_ins-nanox.Po
include ./$(DEPDIR)/nanox_ins_dbg-nanox.Po
include ./$(DEPDIR)/nanox_pfm-nanox.Po

.cpp.o:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Plo
#	$(AM_V_CXX)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LTCXXCOMPILE) -c -o $@ $<

nanox_bindings-nanox_bindings.o: nanox_bindings.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_bindings_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT nanox_bindings-nanox_bindings.o -MD -MP -MF $(DEPDIR)/nanox_bindings-nanox_bindings.Tpo -c -o nanox_bindings-nanox_bindings.o `test -f 'nanox_bindings.cpp' || echo '$(srcdir)/'`nanox_bindings.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/nanox_bindings-nanox_bindings.Tpo $(DEPDIR)/nanox_bindings-nanox_bindings.Po
#	$(AM_V_CXX)source='nanox_bindings.cpp' object='nanox_bindings-nanox_bindings.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_bindings_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nanox_bindings-nanox_bindings.o `test -f 'nanox_bindings.cpp' || echo '$(srcdir)/'`nanox_bindings.cpp

nanox_bindings-nanox_bindings.obj: nanox_bindings.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_bindings_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT nanox_bindings-nanox_bindings.obj -MD -MP -MF $(DEPDIR)/nanox_bindings-nanox_bindings.Tpo -c -o nanox_bindings-nanox_bindings.obj `if test -f 'nanox_bindings.cpp'; then $(CYGPATH_W) 'nanox_bindings.cpp'; else $(CYGPATH_W) '$(srcdir)/nanox_bindings.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/nanox_bindings-nanox_bindings.Tpo $(DEPDIR)/nanox_bindings-nanox_bindings.Po
#	$(AM_V_CXX)source='nanox_bindings.cpp' object='nanox_bindings-nanox_bindings.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_bindings_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nanox_bindings-nanox_bindings.obj `if test -f 'nanox_bindings.cpp'; then $(CYGPATH_W) 'nanox_bindings.cpp'; else $(CYGPATH_W) '$(srcdir)/nanox_bindings.cpp'; fi`

nanox_dbg-nanox.o: nanox.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_dbg_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT nanox_dbg-nanox.o -MD -MP -MF $(DEPDIR)/nanox_dbg-nanox.Tpo -c -o nanox_dbg-nanox.o `test -f 'nanox.cpp' || echo '$(srcdir)/'`nanox.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/nanox_dbg-nanox.Tpo $(DEPDIR)/nanox_dbg-nanox.Po
#	$(AM_V_CXX)source='nanox.cpp' object='nanox_dbg-nanox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_dbg_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nanox_dbg-nanox.o `test -f 'nanox.cpp' || echo '$(srcdir)/'`nanox.cpp

nanox_dbg-nanox.obj: nanox.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_dbg_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT nanox_dbg-nanox.obj -MD -MP -MF $(DEPDIR)/nanox_dbg-nanox.Tpo -c -o nanox_dbg-nanox.obj `if test -f 'nanox.cpp'; then $(CYGPATH_W) 'nanox.cpp'; else $(CYGPATH_W) '$(srcdir)/nanox.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/nanox_dbg-nanox.Tpo $(DEPDIR)/nanox_dbg-nanox.Po
#	$(AM_V_CXX)source='nanox.cpp' object='nanox_dbg-nanox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_dbg_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nanox_dbg-nanox.obj `if test -f 'nanox.cpp'; then $(CYGPATH_W) 'nanox.cpp'; else $(CYGPATH_W) '$(srcdir)/nanox.cpp'; fi`

nanox_ins-nanox.o: nanox.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_ins_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT nanox_ins-nanox.o -MD -MP -MF $(DEPDIR)/nanox_ins-nanox.Tpo -c -o nanox_ins-nanox.o `test -f 'nanox.cpp' || echo '$(srcdir)/'`nanox.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/nanox_ins-nanox.Tpo $(DEPDIR)/nanox_ins-nanox.Po
#	$(AM_V_CXX)source='nanox.cpp' object='nanox_ins-nanox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_ins_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nanox_ins-nanox.o `test -f 'nanox.cpp' || echo '$(srcdir)/'`nanox.cpp

nanox_ins-nanox.obj: nanox.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_ins_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT nanox_ins-nanox.obj -MD -MP -MF $(DEPDIR)/nanox_ins-nanox.Tpo -c -o nanox_ins-nanox.obj `if test -f 'nanox.cpp'; then $(CYGPATH_W) 'nanox.cpp'; else $(CYGPATH_W) '$(srcdir)/nanox.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/nanox_ins-nanox.Tpo $(DEPDIR)/nanox_ins-nanox.Po
#	$(AM_V_CXX)source='nanox.cpp' object='nanox_ins-nanox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_ins_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nanox_ins-nanox.obj `if test -f 'nanox.cpp'; then $(CYGPATH_W) 'nanox.cpp'; else $(CYGPATH_W) '$(srcdir)/nanox.cpp'; fi`

nanox_ins_dbg-nanox.o: nanox.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_ins_dbg_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT nanox_ins_dbg-nanox.o -MD -MP -MF $(DEPDIR)/nanox_ins_dbg-nanox.Tpo -c -o nanox_ins_dbg-nanox.o `test -f 'nanox.cpp' || echo '$(srcdir)/'`nanox.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/nanox_ins_dbg-nanox.Tpo $(DEPDIR)/nanox_ins_dbg-nanox.Po
#	$(AM_V_CXX)source='nanox.cpp' object='nanox_ins_dbg-nanox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_ins_dbg_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nanox_ins_dbg-nanox.o `test -f 'nanox.cpp' || echo '$(srcdir)/'`nanox.cpp

nanox_ins_dbg-nanox.obj: nanox.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_ins_dbg_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT nanox_ins_dbg-nanox.obj -MD -MP -MF $(DEPDIR)/nanox_ins_dbg-nanox.Tpo -c -o nanox_ins_dbg-nanox.obj `if test -f 'nanox.cpp'; then $(CYGPATH_W) 'nanox.cpp'; else $(CYGPATH_W) '$(srcdir)/nanox.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/nanox_ins_dbg-nanox.Tpo $(DEPDIR)/nanox_ins_dbg-nanox.Po
#	$(AM_V_CXX)source='nanox.cpp' object='nanox_ins_dbg-nanox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_ins_dbg_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nanox_ins_dbg-nanox.obj `if test -f 'nanox.cpp'; then $(CYGPATH_W) 'nanox.cpp'; else $(CYGPATH_W) '$(srcdir)/nanox.cpp'; fi`

nanox_pfm-nanox.o: nanox.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_pfm_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT nanox_pfm-nanox.o -MD -MP -MF $(DEPDIR)/nanox_pfm-nanox.Tpo -c -o nanox_pfm-nanox.o `test -f 'nanox.cpp' || echo '$(srcdir)/'`nanox.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/nanox_pfm-nanox.Tpo $(DEPDIR)/nanox_pfm-nanox.Po
#	$(AM_V_CXX)source='nanox.cpp' object='nanox_pfm-nanox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_pfm_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nanox_pfm-nanox.o `test -f 'nanox.cpp' || echo '$(srcdir)/'`nanox.cpp

nanox_pfm-nanox.obj: nanox.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_pfm_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT nanox_pfm-nanox.obj -MD -MP -MF $(DEPDIR)/nanox_pfm-nanox.Tpo -c -o nanox_pfm-nanox.obj `if test -f 'nanox.cpp'; then $(CYGPATH_W) 'nanox.cpp'; else $(CYGPATH_W) '$(srcdir)/nanox.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/nanox_pfm-nanox.Tpo $(DEPDIR)/nanox_pfm-nanox.Po
#	$(AM_V_CXX)source='nanox.cpp' object='nanox_pfm-nanox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(nanox_pfm_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nanox_pfm-nanox.obj `if test -f 'nanox.cpp'; then $(CYGPATH_W) 'nanox.cpp'; else $(CYGPATH_W) '$(srcdir)/nanox.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic clean-libtool cscopelist-am \
	ctags ctags-am distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am uninstall-binPROGRAMS

.PRECIOUS: Makefile


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
